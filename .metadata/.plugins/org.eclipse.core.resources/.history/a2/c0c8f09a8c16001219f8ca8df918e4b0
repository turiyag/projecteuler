package problem;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.lang.Math;

import specialnumbers.IntListing;

public class Problem76 {
	private static ArrayList<LinkedList<IntListing>>	_lilaSums;
	private static int[][]								_iaaSumsUnder;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		IntListing il;
		LinkedList<IntListing> lil;
		_iaaSumsUnder = new int[100][100];
		_lilaSums = new ArrayList<LinkedList<IntListing>>(101);
		lil = new LinkedList<IntListing>();
		il = new IntListing(100);
		il.add(1);
		lil.add(il);
		_lilaSums.add(lil);
		
		lil = new LinkedList<IntListing>();
		il = new IntListing(100);
		il.add(1, 2);
		lil.add(il);
		il = new IntListing(100);
		il.add(2);
		lil.add(il);
		_lilaSums.add(lil);
		for (int i = 1; i < 10; i++) {
			lil = allSums(i);
			System.out.println(i + ": " + lil.size());
			System.out.println(i + ": " + allSumsUnder(i, i));
		}
	}
	
	private static LinkedList<IntListing> allSums(int iNum) {
		LinkedList<IntListing> lilRet;
		LinkedList<IntListing> lilPrev;
		LinkedList<IntListing> lil2Prev;
		IntListing il;
		IntListing ilDup;
		Iterator<IntListing> iterator;
		
		lilRet = new LinkedList<IntListing>();
		if (iNum < 1) {
			return lilRet;
		} else if (iNum == 1) {
			il = new IntListing(100);
			il.add(1);
			lilRet.add(il);
			return lilRet;
		} else if (iNum == 2) {
			il = new IntListing(100);
			il.add(1, 2);
			lilRet.add(il);
			il = new IntListing(100);
			il.add(2);
			lilRet.add(il);
			return lilRet;
		} else if (_lilaSums.size() >= iNum) {
			return _lilaSums.get(iNum - 1);
		} else {
			for (int i = 1; i <= iNum / 2; i++) {
				lilPrev = allSums(iNum - i);
				lil2Prev = allSums(i);
				for (IntListing ilPrev : lilPrev) {
					for (IntListing il2Prev : lil2Prev) {
						il = new IntListing(100);
						il.add(il2Prev);
						il.add(ilPrev);
						lilRet.add(il);
					}
				}
				
			}
			il = new IntListing(100);
			il.add(iNum);
			lilRet.add(il);
			Collections.sort(lilRet);
			ilDup = new IntListing(100);
			iterator = lilRet.iterator();
			while (iterator.hasNext()) {
				il = iterator.next();
				if (il.equals(ilDup)) {
					iterator.remove();
				} else {
					ilDup = il;
				}
			}
			_lilaSums.add(lilRet);
			return lilRet;
		}
	}
	
	private static int allSumsUnder(int iNum, int iUnder) {
		int iTotalCount;
		iUnder = Math.min(iNum, iUnder);
		if (iNum == 1 || iUnder == 1) {
			return 1;
		} else if (iNum == 0) {
			return 1;
		} else if (_iaaSumsUnder[iNum][iUnder] != 0) {
			return _iaaSumsUnder[iNum][iUnder];
		} else {
			iTotalCount = 0;
			for (int i = iUnder; i > 0; i--) {
				iTotalCount += allSumsUnder(iNum - i, i);
			}
			_iaaSumsUnder[iNum][iUnder] = iTotalCount;
			return iTotalCount;
		}
	}
}
