package extras;

import java.util.ArrayList;
import java.util.LinkedList;
import java.lang.Math;
import java.math.BigInteger;

import specialnumbers.IntListing;

public class BigSums {
	private ArrayList<LinkedList<IntListing>>	_lilaSums;
	private BigInteger[][]						_baaSumsUnder;
	private int									_iMax;
	private BigInteger[]						_baaSumsUnder2;
	
	public BigSums(int iMax) {
		super();
		_iMax = iMax + 1;
		_baaSumsUnder = new BigInteger[_iMax][_iMax];
		_baaSumsUnder2 = new BigInteger[_iMax];
		_lilaSums = new ArrayList<LinkedList<IntListing>>(_iMax);
		LinkedList<IntListing> lil = new LinkedList<IntListing>();
		
		IntListing il = new IntListing(_iMax);
		il.add(1);
		lil.add(il);
		_lilaSums.add(lil);
		
		lil = new LinkedList<IntListing>();
		il = new IntListing(_iMax);
		il.add(1, 2);
		lil.add(il);
		il = new IntListing(_iMax);
		il.add(2);
		lil.add(il);
		_lilaSums.add(lil);
	}
	
	public BigInteger allSumsUnder(int iNum, int iUnder) {
		BigInteger bTotalCount;
		iUnder = Math.min(iNum, iUnder);
		if (iNum == 1 || iUnder == 1) {
			return BigInteger.ONE;
		} else if (iNum == 0) {
			return BigInteger.ONE;
		} else if (_baaSumsUnder[iNum][iUnder] != null) {
			return _baaSumsUnder[iNum][iUnder];
		} else {
			bTotalCount = BigInteger.ZERO;
			for (int i = iUnder; i > 0; i--) {
				bTotalCount = bTotalCount.add(allSumsUnder(iNum - i, i));
			}
			_baaSumsUnder[iNum][iUnder] = bTotalCount;
			return bTotalCount;
		}
	}
	
	public BigInteger allSumsUnder2(int iNum) {
		BigInteger bTotalCount;
		if (iNum == 1) {
			return BigInteger.ONE;
		} else if (iNum == 0) {
			return BigInteger.ONE;
		} else if (iNum < 0) {
			return BigInteger.ZERO;
		} else if (_baaSumsUnder2[iNum] != null) {
			return _baaSumsUnder2[iNum];
		} else {
			bTotalCount = BigInteger.ZERO;
			for (int i = 1; i <= iNum; i++) {
				if (i % 2 == 0) {
					bTotalCount = bTotalCount.subtract(allSumsUnder2(iNum - ((3 * i - 1) * i) / 2));
					bTotalCount = bTotalCount.subtract(allSumsUnder2(iNum - ((3 * i + 1) * i) / 2));
				} else {
					bTotalCount = bTotalCount.add(allSumsUnder2(iNum - ((3 * i - 1) * i) / 2));
					bTotalCount = bTotalCount.add(allSumsUnder2(iNum - ((3 * i + 1) * i) / 2));
				}
			}
			_baaSumsUnder2[iNum] = bTotalCount;
			return bTotalCount;
		}
	}
	
}
