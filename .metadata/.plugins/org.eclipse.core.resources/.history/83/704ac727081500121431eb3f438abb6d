package problem;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;

import specialnumbers.IntListing;

public class Problem76 {
	private static ArrayList<LinkedList<IntListing>>	_lilaSums;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		_lilaSums = new ArrayList<LinkedList<IntListing>>(101);
		System.out.println((_lilaSums. == null));
	}
	
	private static LinkedList<IntListing> allSums(int iNum) {
		LinkedList<IntListing> lilRet;
		LinkedList<IntListing> lilPrev;
		LinkedList<IntListing> lil2Prev;
		IntListing il;
		IntListing ilDup;
		Iterator<IntListing> iterator;
		
		lilRet = new LinkedList<IntListing>();
		if (iNum < 1) {
			return lilRet;
		} else if (iNum == 1) {
			il = new IntListing(1);
			il.add(1);
			lilRet.add(il);
			return lilRet;
		} else if (iNum == 2) {
			il = new IntListing(1);
			il.add(1, 2);
			il = new IntListing(1);
			il.add(2);
			lilRet.add(il);
			return lilRet;
		} else if (_lilaSums.size() >= iNum) {
			return _lilaSums.get(iNum);
		} else {
			lilPrev = allSums(iNum-1);
			lil2Prev = allSums(iNum-2);
			for (IntListing ilPrev: lilPrev){
				for (IntListing il2Prev: lil2Prev){
					il = new IntListing(100);
					il.add(il2Prev);
					il.add(ilPrev);
					lilRet.add(il);
				}
			}
			Collections.sort(lilRet);
			ilDup = null;
			iterator = lilRet.iterator();
				if (ilCurr.equals(ilDup)){
					for (int i = 0; i < ret.length; i++) {
						ret[i] = iterator.next().intValue();
					}
				}
		}
		return null;
		
	}
}
